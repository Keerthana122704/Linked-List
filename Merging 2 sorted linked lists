import java.io.*;
import java.util.*;

class ListNode {
    int data;
    ListNode next;

    ListNode(int data) {
        this.data = data;
        this.next = null;
    }
}

class SinglyLinkedList {
    public ListNode head;
    public ListNode tail;

    public SinglyLinkedList() {
        this.head = null;
        this.tail = null;
    }

    public void insertNode(int nodeData) {
        ListNode node = new ListNode(nodeData);
        if (this.head == null) {
            this.head = node;
        } else {
            this.tail.next = node;
        }
        this.tail = node;
    }
}

public class Solution {

    public static ListNode mergeLists(ListNode headA, ListNode headB) {
        ListNode dummy = new ListNode(-1); // Dummy node
        ListNode current = dummy;

        while (headA != null && headB != null) {
            if (headA.data < headB.data) {
                current.next = headA;
                headA = headA.next;
            } else {
                current.next = headB;
                headB = headB.next;
            }
            current = current.next;
        }

        // Attach remaining nodes
        current.next = (headA != null) ? headA : headB;

        return dummy.next;
    }

    public static void printList(ListNode head) {
        while (head != null) {
            System.out.print(head.data);
            if (head.next != null) System.out.print(" ");
            head = head.next;
        }
        System.out.println(); // for new line after printing the list
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt(); // number of test cases

        while (t-- > 0) {
            // First linked list
            int n1 = sc.nextInt();
            SinglyLinkedList llist1 = new SinglyLinkedList();
            for (int i = 0; i < n1; i++) {
                llist1.insertNode(sc.nextInt());
            }

            // Second linked list
            int n2 = sc.nextInt();
            SinglyLinkedList llist2 = new SinglyLinkedList();
            for (int i = 0; i < n2; i++) {
                llist2.insertNode(sc.nextInt());
            }

            // Merge and print result
            ListNode merged = mergeLists(llist1.head, llist2.head);
            printList(merged);
        }

        sc.close();
    }
}
